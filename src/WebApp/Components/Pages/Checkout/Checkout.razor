@page "/checkout"
@using System.Globalization
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using eShop.ServiceDefaults
@inject BasketState Basket
@inject NavigationManager Nav
@attribute [Authorize]

<PageTitle>Checkout | AdventureWorks</PageTitle>
<SectionContent SectionName="page-header-title">Checkout</SectionContent>

<div class='checkout'>
    <EditForm EditContext="@editContext" FormName="checkout" OnSubmit="@HandleSubmitAsync" Enhance>
        <DataAnnotationsValidator />
        <div class="form">
            <div class="form-section">
                <h2>Shipping address</h2>
                <label>
                    Address
                    <InputText @bind-Value="@Info.Street" />
                    <ValidationMessage For="@(() => Info.Street)" />
                </label>
                <div class="form-group">
                    <div class="form-group-item">
                        <label>
                            City
                            <InputText @bind-Value="@Info.City" />
                            <ValidationMessage For="@(() => Info.City)" />
                        </label>
                    </div>
                    <div class="form-group-item">
                        <label>
                            State
                            <InputText @bind-Value="@Info.State" />
                            <ValidationMessage For="@(() => Info.State)" />
                        </label>
                    </div>
                    <div class="form-group-item">
                        <label>
                            Zip code
                            <InputText @bind-Value="@Info.ZipCode" />
                            <ValidationMessage For="@(() => Info.ZipCode)" />
                        </label>
                    </div>
                </div>
                <div>
                    <label>
                        Country
                        <InputText @bind-Value="@Info.Country" />
                        <ValidationMessage For="@(() => Info.Country)" />
                    </label>
                </div>
            </div>
            <div class="form-section">
                <div class="form-buttons">
                    <a href="cart" class="button button-secondary"><img role="presentation" src="icons/arrow-left.svg" />Back to the shopping bag</a>
                    <button class="button button-primary" type="submit">Place order</button>
                </div>
            </div>
        </div>
        <ValidationSummary />
    </EditForm>
</div>

@code {
    private EditContext editContext = default!;
    private ValidationMessageStore extraMessages = default!;

    [SupplyParameterFromForm]
    public BasketCheckoutInfo Info { get; set; } = default!;

    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    protected override void OnInitialized()
    {
        // Start an activity for checkout page initialization
        using var activity = OpenTelemetryCheckoutExtensions.CheckoutActivitySource.StartActivity("CheckoutPageInit");
        
        if (Info is null)
        {
            PopulateFormWithDefaultInfo();
        }

        editContext = new EditContext(Info!);
        extraMessages = new ValidationMessageStore(editContext);
        
        activity?.SetStatus(ActivityStatusCode.Ok);
    }

    private void PopulateFormWithDefaultInfo()
    {
        // Start an activity for retrieving default checkout info
        using var activity = OpenTelemetryCheckoutExtensions.CheckoutActivitySource.StartActivity("PopulateCheckoutDefaults");
        
        Info = new BasketCheckoutInfo
        {
            Street = ReadClaim("address_street"),
            City = ReadClaim("address_city"),
            State = ReadClaim("address_state"),
            Country = ReadClaim("address_country"),
            ZipCode = ReadClaim("address_zip_code"),
            RequestId = Guid.NewGuid()
        };
        
        activity?.SetTag("checkout.request_id", Info.RequestId);
        activity?.SetStatus(ActivityStatusCode.Ok);

        string? ReadClaim(string type)
            => HttpContext.User.Claims.FirstOrDefault(x => x.Type == type)?.Value;
    }

    private async Task HandleSubmitAsync()
    {
        // Start an activity for form submission
        using var activity = OpenTelemetryCheckoutExtensions.CheckoutActivitySource.StartActivity("HandleCheckoutSubmit");
        
        try
        {
            await PerformCustomValidationAsync();

            if (editContext.Validate())
            {
                await HandleValidSubmitAsync();
                activity?.SetStatus(ActivityStatusCode.Ok);
            }
            else
            {
                activity?.SetStatus(ActivityStatusCode.Error, "Checkout validation failed");
            }
        }
        catch (Exception ex)
        {
            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
            throw;
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        // Start an activity for checkout submission
        using var activity = OpenTelemetryCheckoutExtensions.CheckoutActivitySource.StartActivity(
            OpenTelemetryCheckoutExtensions.CheckoutOperations.InitiateCheckout);
        
        activity?.SetTag("checkout.request_id", Info.RequestId);
        
        try
        {
            Info.CardTypeId = 1;
            await Basket.CheckoutAsync(Info);
            
            activity?.SetStatus(ActivityStatusCode.Ok);
            Nav.NavigateTo("user/orders");
        }
        catch (Exception ex)
        {
            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
            throw;
        }
    }

    private async Task PerformCustomValidationAsync()
    {
        // Start an activity for checkout validation
        using var activity = OpenTelemetryCheckoutExtensions.CheckoutActivitySource.StartActivity(
            OpenTelemetryCheckoutExtensions.CheckoutOperations.ValidateCart);
        
        try
        {
            extraMessages.Clear();

            var basketItems = await Basket.GetBasketItemsAsync();
            activity?.SetTag("basket.items_count", basketItems.Count);
            
            if (basketItems.Count == 0)
            {
                extraMessages.Add(new FieldIdentifier(Info, ""), "Your cart is empty");
                activity?.SetStatus(ActivityStatusCode.Error, "Empty cart");
            }
            else
            {
                activity?.SetStatus(ActivityStatusCode.Ok);
            }
        }
        catch (Exception ex)
        {
            activity?.SetStatus(ActivityStatusCode.Error, ex.Message);
            throw;
        }
    }

    private static DateTime? ParseExpiryDate(string? mmyy)
        => DateTime.TryParseExact($"01/{mmyy}", "dd/MM/yy", null, DateTimeStyles.None, out var result) ? result.ToUniversalTime() : null;
}
