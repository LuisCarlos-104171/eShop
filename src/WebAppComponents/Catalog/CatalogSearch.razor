@using System.Diagnostics
@using eShop.ServiceDefaults
@inject CatalogService CatalogService
@inject NavigationManager Nav

@if (catalogBrands is not null && catalogItemTypes is not null)
{
    <div class="catalog-search">
        <div class="catalog-search-header">
            <img role="presentation" src="icons/filters.svg" />
            Filters
        </div>
        <div class="catalog-search-types">
            <div class="catalog-search-group">
                <h3>Brand</h3>
                <div class="catalog-search-group-tags">
                    <a href="@BrandUri(null)"
                    class="catalog-search-tag @(BrandId == null ? "active " : "")">
                        All
                    </a>
                    @foreach (var brand in catalogBrands)
                    {
                        <a href="@BrandUri(brand.Id)"
                        class="catalog-search-tag @(BrandId == brand.Id ? "active " : "")">
                            @brand.Brand
                        </a>
                    }
                </div>
            </div>
            <div class="catalog-search-group">
                <h3>Type</h3>

                <div class="catalog-search-group-tags">
                    <a href="@TypeUri(null)"
                    class="catalog-search-tag @(ItemTypeId == null ? "active " : "")">
                    All
                    </a>
                    @foreach (var itemType in catalogItemTypes)
                    {
                        <a href="@TypeUri(itemType.Id)"
                        class="catalog-search-tag @(ItemTypeId == itemType.Id ? "active " : "")">
                            @itemType.Type
                        </a>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    IEnumerable<CatalogBrand>? catalogBrands;
    IEnumerable<CatalogItemType>? catalogItemTypes;
    [Parameter] public int? BrandId { get; set; }
    [Parameter] public int? ItemTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var activity = OpenTelemetryCheckoutExtensions.CatalogActivitySource.StartActivity("LoadCatalogFilters");
        
        try
        {
            var stopwatch = Stopwatch.StartNew();
            
            var brandsTask = CatalogService.GetBrands();
            var itemTypesTask = CatalogService.GetTypes();
            await Task.WhenAll(brandsTask, itemTypesTask);
            catalogBrands = brandsTask.Result;
            catalogItemTypes = itemTypesTask.Result;
            
            stopwatch.Stop();
            
            activity?.SetTag("catalog.brands_count", catalogBrands.Count());
            activity?.SetTag("catalog.types_count", catalogItemTypes.Count());
            activity?.SetTag("catalog.load_duration_ms", stopwatch.ElapsedMilliseconds);
            activity?.SetStatus(ActivityStatusCode.Ok);
        }
        catch (Exception ex) 
        {
            activity?.SetExceptionTags(ex);
            throw;
        }
    }

    private string BrandUri(int? brandId) 
    {
        if (BrandId != brandId)
        {
            // Track filter change
            var activity = OpenTelemetryCheckoutExtensions.CatalogActivitySource.StartActivity("ApplyBrandFilter");
            activity?.SetTag("catalog.previous_brand", BrandId);
            activity?.SetTag("catalog.new_brand", brandId);
            activity?.SetTag("catalog.filter_type", "brand");
            activity?.SetStatus(ActivityStatusCode.Ok);
        }
        
        return Nav.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "page", null },
            { "brand", brandId },
        });
    }

    private string TypeUri(int? typeId) 
    {
        if (ItemTypeId != typeId)
        {
            // Track filter change
            var activity = OpenTelemetryCheckoutExtensions.CatalogActivitySource.StartActivity("ApplyTypeFilter");
            activity?.SetTag("catalog.previous_type", ItemTypeId);
            activity?.SetTag("catalog.new_type", typeId);
            activity?.SetTag("catalog.filter_type", "item_type");
            activity?.SetStatus(ActivityStatusCode.Ok);
        }
        
        return Nav.GetUriWithQueryParameters(new Dictionary<string, object?>()
        {
            { "page", null },
            { "type", typeId },
        });
    }
}
